when would you want to create a remote repository rather than 
keeping all  your work local?

1- when you want to keep the versions of your source code on a 
cloud server
2- when you want to collaborate with different people so that 
you can push your local data to the cloud and other people can 
pull this data back into their local machine and vice versa.
    

Why might you want to always pull changes manually rather than 
having Git automatically stay up-to-date with your remote
repository?

In order to be able to only pull changes that make up a new 
feature or something new in the source code instead of just
pulling source code that doesn't work or conflicts with the 
code you are working on.


Describe the differences between forks, clones, and branches. 
When would you use one instead of another?

forks: copy a version of a repository on github to your own
github account, but nothing gets copied to your local machine.

clones: copy a remote repository on github to your local 
machine 

branches: make a different version of the code on your local 
machine with the same parent commit, in order to work on new 
feature or expirement on some code.


What is the benefit of having a copy of the last known state 
of the remote stored locally?

This way you can identify the point when you were last in synq 
with the remote, in which case when you attempt to fetch the 
remote you branch from that local point and change the 
origin master label to the new synchronized commits from the 
remote right the new branch before you start merging with you 
local branch wether it is master or any other.


How would you collaborate without using Git or GitHub? What 
would be easier, and what would be harder?

Collaboration wihout git and github can be possible by adding 
different versions of the code on a cloud based service for 
all the team members to see. This would be very tedious and 
difficult to maintain specially with large project and 
slightly large team where everyone wants to add his version 
and each one needs to get checked for conflicts.

accessibilty will be much easier though. you won't need to 
learn git because you will have a very friendly interface that 
helps you upload your files without any commands or other sort 
of complication.


When would you want to make changes in a separate branch 
rather than directly in master? What benefits does each 
approach have?

when you want to expirement on code in a different branch and 
then when merging time comes start resolving the conflicts 
that occur between master and the branch.

when you want to collaborate with others, but don't want to 
cause conflicts in the workflow by pushing to master right 
away everytime you make a change; you create a new branch, 
make all the changes you want in there, and then create a pull 
request when you are ready to merge with master. 

